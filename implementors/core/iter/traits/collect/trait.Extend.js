(function() {var implementors = {};
implementors["imgui"] = [{"text":"impl Extend&lt;FontAtlasFlags&gt; for FontAtlasFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;ConfigFlags&gt; for ConfigFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;BackendFlags&gt; for BackendFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;ImGuiDragDropFlags&gt; for ImGuiDragDropFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;ImDrawCornerFlags&gt; for ImDrawCornerFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;ImDrawListFlags&gt; for ImDrawListFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;ImGuiInputTextFlags&gt; for ImGuiInputTextFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;ImGuiTreeNodeFlags&gt; for ImGuiTreeNodeFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;ItemHoveredFlags&gt; for ItemHoveredFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;ColorEditFlags&gt; for ColorEditFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;ComboBoxFlags&gt; for ComboBoxFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;SelectableFlags&gt; for SelectableFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;WindowHoveredFlags&gt; for WindowHoveredFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;WindowFocusedFlags&gt; for WindowFocusedFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;WindowFlags&gt; for WindowFlags","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Extend&lt;TokenTree&gt; for TokenStream","synthetic":false,"types":[]},{"text":"impl Extend&lt;TokenStream&gt; for TokenStream","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; Extend&lt;&lt;A as Array&gt;::Item&gt; for SmallVec&lt;A&gt;","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl&lt;T, P&gt; Extend&lt;T&gt; for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Default,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, P&gt; Extend&lt;Pair&lt;T, P&gt;&gt; for Punctuated&lt;T, P&gt;","synthetic":false,"types":[]},{"text":"impl Extend&lt;Error&gt; for Error","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()